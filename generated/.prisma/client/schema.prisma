generator client {
  provider      = "prisma-client-js"
  output        = "../generated/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  type                     String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  providerType             String?
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  refresh_token_expires_in Int?
  access_token             String?   @db.Text
  accessTokenExpires       DateTime?
  createDate               DateTime  @default(now())
  updateDate               DateTime  @updatedAt
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  createDate   DateTime @default(now())
  updateDate   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("session")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  superAdmin    Boolean   @default(false) @map("super_admin")

  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  post     Post[]
  accounts Account[]
  sessions Session[]
  gallery  Gallery[]
  code     Code[]

  @@index([email])
  @@index([createDate])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  uuid       String   @unique
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  image String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  gallery Gallery[]

  @@index([createDate])
  @@index([userId])
  @@map("post")
}

model Gallery {
  id         Int      @id @default(autoincrement())
  image      String
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post     Post   @relation(fields: [postUUid], references: [uuid], onDelete: Cascade)
  postUUid String
}

model Code {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  lang       String
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}
